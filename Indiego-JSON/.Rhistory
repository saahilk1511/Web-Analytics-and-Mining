library(sampling)
n <- 12
N <- nrow(cardata)
s <- srswor(n, N)
sample1 <- cardata[s != 0, ]
table(sample1$Make)
sample1
##
set.seed(757)
pik <- inclusionprobabilities(cardata$mpg,12)
s <- UPsystematic(pik)
sample2 <- cardata[s != 0, ]
# The frequencies for the selected Make
table(sample2$Make)
freq <- table(cardata$cyl)
sizes <- ceiling(n * freq / sum(freq))
sizes
st <- sampling::strata(cardata, stratanames = c("cyl"),
size = rep(3, 4), method = "srswor")
sample3 <- getdata(cardata, st)
sample3
cardata
# The frequencies for the selected Make
table(sample3$Make)
set.seed(757)
st <- sampling::strata(cardata, stratanames = c("cyl"),
size = rep(3, 4), method = "srswor")
sample3 <- getdata(cardata, st)
sample3
# The frequencies for the selected Make
table(sample3$Make)
mean(sample1$mpg)
mean(sample2$mpg)
mean(sample3$mpg)
library(stringr)
library(UsingR)
s <- "United States"
str_sub(s, 1, 6)
str_sub(s, start = c(1, 8), end = c(6, 13))
s <- "f239"
str_sub(s, start = c(1, 2), end = str_length(s))
substr(rep(s, 3), c(1,3,5), c(2,4,6))
str_sub(s, -1)
s <- "United States"
str_sub(s, -1)
str_sub(s, 1,-1)
str_sub(s, end = c(6, 13))
str_sub(s, c(1, 8))
str_sub(s, end = c(6, 13))
str_sub(s, end = -6)
s <- "f239"
str_sub(s, start = 1, end = str_length(s))
str_sub(s, start = 1, end = str_length(s)/2)
str_sub(s, start = c(1,str_length(s)/2))
str_sub(s, start = c(1, 2), end = (3,4))
str_sub(s, start = c(1, 2), end = c(3,4))
sub_str(rep(string, 3), c(1,3,5), c(2,4,6))
str_sub(rep(s, 3), c(1,3,5), c(2,4,6))
str_sub(rep(s, 3), c(1,3), c(2,4))
str_sub(s, start = 2, end = str_length(s))
str_sub(s, start = 1, end = str_length(s))
str_sub(s, start = c(1,3), end = c(str_length(s)-1, str_length(s))
str_sub(s, start = c(1,3), end = c((str_length(s)-1), str_length(s)))
str_sub(s, start = c(1,3), end = c((str_length(s)-1), str_length(s)))
str_sub(s, start = c(1,2), end = c((str_length(s)-1), str_length(s)))
str_sub(s, start = c(1,2), end = c((str_length(s)-2), str_length(s)))
str_sub(s, start = c(1,2), end = c(str_length(s), (str_length(s)-1))
str_sub(s, start = c(1,2), end = c(str_length(s), (str_length(s)-1)))
str_sub(s, start = c(1,2), end = c(str_length(s), (str_length(s)-1)))
str_sub(s, start =1, end = 2))
str_sub(s, start =1, end = 2)
str_sub(s, start =c(1,2), end = 3)
str_sub(s, start =c(1,2), end = 2)
str_sub(s, start =c(1,2), end = -1)
str_sub(s, start =c(1,2), end = str_length(s))
str_sub(s, end = c(6, 13))
s <- "United States"
str_sub(s, end = c(6, 13))
str_sub(s, start = c(1, 8), end = c(6, 13))
str_sub(s, start = c(1,2), end =  c(3,4))
s <- "f239"
str_sub(s, start = c(1,2), end =  c(3,4))
str_sub(s, start = c(1,2), end =  c(4,4))
str_sub(s, start = c(1,2), end =  3)
str_sub(s, start = c(1,2), end =  -2)
s <- "f239"
str_sub(s, start = c(1,2), end =  -1)
str_sub(s, start = c(1,3), end =  -1)
str_sub(s, start = c(0,1), end =  -1)
###
data <- c(305, 865, 575, 455, 720, 835, 135, 880, 560, 665, 790, 190, 800, 345, 900, 755, 740, 690, 410, 385, 175, 200, 700, 115, 615, 375, 300, 230)
sales <- matrix(data, ncol = 7, byrow = TRUE)
sales
max(sales)
sales[max(sales)]
sales[c(max(sales)),]
sales[1:2]
sales[1,]
sales[max(1:nrow(sales)),]
for(i in 1:nrow(sales))
{
print(paste("Maximum number of sales for Store", i, "is:", max(sales[i,])))
}
max(sales[,c(1:nrow(sales))])
sales[max(sales[,c(1:nrow(sales))])]
for(i in 1:nrow(sales))
{
max_row_col = which(sales == max(sales[i,]), arr.ind = TRUE)
print(paste("Maximum sales for Store", i, "was in Week:", max_row_col[2]))
}
for(i in 1:nrow(sales))
{
if (max(sales[i,])>845) {
print(paste("Maximum sales for Store", i, "exceeds target 845 by", (max(sales[i,]-845))))
} else {
print(paste("Maximum sales for Store", i, "trails target 845 by", (845-max(sales[i,]))))
}
}
all(x %% 2 != 0 & x>25 & x<75)
x <- c(43, 59, 61, 65, 71, 77, 79, 89)
all(x %% 2 != 0 & x>25 & x<75)
for(i in 1:nrow(sales))
{
if (max(sales[i,])>865) {
print(paste("Maximum sales for Store", i, "exceeds target 845 by", (max(sales[i,]-865))))
} else {
print(paste("Maximum sales for Store", i, "trails target 845 by", (865-max(sales[i,]))))
}
}
for(i in 1:nrow(sales))
{
max_row_col = which(sales == max(sales[i,]), arr.ind = TRUE)
if (max(sales[i,])>865) {
print(paste("Store", i, "maximum sales of", max(sales[i,]),"in week", max_row_col[2],"and exceeds target 865 by", (max(sales[i,]-865))))
} else {
print(paste("Store", i, "maximum sales of", max(sales[i,]),"in week", max_row_col[2],"and trails target 865 by", (865-max(sales[i,]))))
}
}
###
data <- c(305, 865, 575, 455, 720, 835, 135, 880, 560, 665, 790, 190, 800, 345, 900, 755, 740, 690, 410, 385, 175, 200, 700, 115, 615, 375, 300, 230)
sales <- matrix(data, ncol = 7, byrow = TRUE)
dimnames(sales) <- list(
c("Store 1", "Store 2", "Store 3","Store 4"),
c("Week 1", "Week 2","Week 3", "Week 4", "Week 5", "Week 6", "Week 7"))
sales
for(i in 1:nrow(sales))
{
print(paste("Maximum number of sales for Store", i, "is:", max(sales[i,])))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,])))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,])))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,]))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,],"\n"))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,],"/n"))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,] , "\n" ))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,] + "\n" ))
}
for(i in 1:nrow(sales))
{
cat("Maximum number of sales for Store", i, "is:", max(sales[i,]),"\n")
}
sales[max(nrow(sales)),]
sales[max(c(1:nrow(sales),)]
sales[max(c(1:nrow(sales)),]
for(i in 1:nrow(sales))
{
cat("Store",i, "was",(max(sales[i,]-865)) ,"off from the target","\n")
}
for(i in 1:nrow(sales))
{
if (max(sales[i,])>865) {
cat("Store",i, "trails target 865 by", (max(sales[i,])-865),"\n")
} else {
cat("Store",i, "trails target 865 by", (865-max(sales[i,])),"\n")
}
}
ncol(sales)
1:ncol(sales)
colnames(sales)
colnames(sales)[1]
sales
for(i in 1:nrow(sales))
{
}
colnames(max(sales))
for(i in 1:nrow(sales))
{
col_na = which(sales == max(sales[i,]), arr.ind = TRUE)
cat("Maximum number of sales for Store was in ",col_na[2],"\n")
}
for(i in 1:nrow(sales))
{
col_na = which(sales == max(sales[i,]), arr.ind = TRUE)
cat("Maximum number of sales for Store was in Week",col_na[2],"\n")
}
for(i in 1:nrow(sales))
{
col_na = which(sales == max(sales[i,]), arr.ind = TRUE)
cat("Maximum number of sales for Store",i,"was in Week",col_na[2],"\n")
}
for(i in 1:nrow(sales))
{
col_na = which(sales == max(sales[i,]), arr.ind = TRUE)
if (max(sales[i,])>865) {
cat("Store",i, "maximum sales of",max(sales[i,]), "in Week",col_na[2],
"and trails target 865 by" ,(max(sales[i,])-865),"\n")
}
else{
cat("Store",i, "maximum sales of",max(sales[i,]), "in Week",col_na[2],
"and trails target 865 by" ,(865-max(sales[i,])),"\n")
}
}
for(i in 1:nrow(sales))
{
cat("Store", i, "maximum sales of", max(sales[i,]),"\n")
}
set.seed(957)
for (i in 1:100) {
nbi_plot1 <- rnbinom(100, size = r, prob = p )
}
table(nbi_plot1)
str_sub(s, start = 1, end =  2)
str_sub(s, start = c(1,2), end =  3)
str_sub(s, start = c(1,2), end =  2)
str_sub(s, start = c(1,2), end =  c(1,2)
str_sub(s, start = c(1,2), end =  c(1,2))
str_sub(s, start = c(1,2), end =  c(1,2))
str_sub(s, start = c(1,2), end =  str_length(s))
str_sub(s, start = c(1,3), end =  c(2,4))
str_sub(rep(s, str_length(s)/2), c(1,3), c(2,4))
s <- "e169#@"
str_sub(rep(s, str_length(s)/2), c(1,3), c(2,4))
str_sub(rep(s, str_length(s)), c(1,3), c(2,4))
str_length(s)
str_length(s)/2
substr(rep(s, 3), c(1,3,5), c(2,4,6))
substr(s, c(1,3,5), c(2,4,6))
s <- "e169#@"
substr(s, c(1,3,5), c(2,4,6))
substr(rep(s, str_length(s)), c(1,3,5), c(2,4,6))
substr(rep(s, str_length(s)-1), c(1,3,5), c(2,4,6))
substr(rep(s, str_length(s)/2), c(1,3,5), c(2,4,6))
s <- "bdflm178"
substr(rep(s, str_length(s)/2), c(1,3,5), c(2,4,6))
str_length(s)
str_sub(s, start = (1:str_length(s)/2)+1), end =  c(1:str_length(s)/2)))
s <- "f239"
str_length(s)/2
s <- "bequvw137@"
s <- "bequvw137@"
str_sub(rep(s, str_length(s)/2), c(1,3,5,7), c(2,4,6,8))
str_sub(rep(s, str_length(s)), c(1,3,5,7), c(2,4,6,8))
str_sub(s, start = 1:(nchar(s) - 1), end = 2:nchar(s))
s <- "f239"
str_sub(s, start = 1:(nchar(s) - 1), end = 2:nchar(s))
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "e169#@"
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "bequvw137@"
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, str_length(s)/2)), c(seq(2,by=2, str_length(s)/2)))
str_sub(rep(s, str_length(s)/2),
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(1,by=2, len=(str_length(s)/2)+1)))
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(1,by=2, len=(str_length(s)/2)+1)))
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "e169#@"
str_sub(rep(s, str_length(s)/2),
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
str_sub(s,
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "f239"
str_sub(s,
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "bdflm178"
str_sub(s,
c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
s <- "bequvw137@"
str_sub(s, c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
str_sub(s, start = (1:str_length(s)/2)+1), end =  c(1:str_length(s)/2)))
library(stringr)
library(UsingR)
s <- "f239"
str_sub(s, start = (1:str_length(s)/2)+1), end =  c(1:str_length(s)/2)))
str_sub(s, c(seq(1,by=2, len=str_length(s)/2)), c(seq(2,by=2, len=str_length(s)/2)))
mad(12, 28, 31, 34, 34, 48, 59, 60, 63, 65, 70, 105, 134, 141, 151)
MeanAD(12, 28, 31, 34, 34, 48, 59, 60, 63, 65, 70, 105, 134, 141, 151)
x <- 12, 28, 31, 34, 34, 48, 59, 60, 63, 65, 70, 105, 134, 141, 151
x <- c(12, 28, 31, 34, 34, 48, 59, 60, 63, 65, 70, 105, 134, 141, 151)
MeanAD(x)
mad(x)
library(prob)
library(plotly)
library(UsingR)
library(sampling)
library(boot)
library(heatmaply)
library(tidyverse)
bitcoin <- read.csv("bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv", header = TRUE )
MeanAD(x)
install.packages("tinytex")
install.packages("tinytex")
pws
pwd
cws
gwtwd()
getwd()
tinytex::install_tinytex()
install.packages("rvest")
install.packages("rvest")
library(rvest)
met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
met688
class(met688)
met688 <- read_html("https://www.bu.edu/academics/met/courses/met-cs-688")
aaa <- html_nodes(met688, '.cf-course') %>% html_text()
aaa
?remove
# US Barkeley example - example 10.4
# Calculate left side of equaiton after solving with respect to Z
A <- as.data.frame(UCBAdmissions)
head(A)
xtabs(Freq ~ Admit, data = A)
phat <- 1755/(1755 + 2771)
(phat - 0.4)/sqrt(0.4 * 0.6/(1755 + 2771)) # Z-score
# 99% Confidence Interval
-qnorm(0.99) # 99% confidence
# 95% Confidence Interval
-qnorm(0.95) # 95% confidence
# P-Value
pnorm(-1.680919)
?head
head(A,8)
pnorm(0,2, lower.tail = F)
v(0.1,0.30.75)
v <- (0.1,0.30.75)
v = (0.1,0.30.75)
v <- (0.1,0.30, 0.75)
v = (0.1, 0.30, 0.75)
v <- c(0.1, 0.30, 0.75)
qnorm(v)
dchisq(x, df, ncp = 0, log = FALSE)
x <- seq(-20,20,by=1)
dchisq(x, df, ncp = 0, log = FALSE)
dchisq?
a
help(dchisq)
x <- seq(-20,20,by=1)
dchisq(x, df, ncp = 0, log = FALSE)
dchisq(x, df=1:2000, ncp = 0, log = FALSE)
x <- c(638 , 1696 , 2661 , 7069 , 6122 , 7728)
mean(X)
x <- c(638 , 1696 , 2661 , 7069 , 6122 , 7728)
mean(x)
x <- c(76 , 27 , 25 , 58 , 49 , 94)
median(x)
round((pnorm(269, mean = 257, sd = 6) - pnorm(245, mean = 257, sd = 6)) * 100, 2)
round((pnorm(269, mean = 257, sd = 6) - pnorm(245, mean = 257, sd = 6)) * 100)
round((pnorm(63.47, mean = 59, sd =  1.49) - pnorm(54.53, mean = 59, sd =  1.49)) * 100)
round((pnorm(63.47, mean = 59, sd =  1.49) - pnorm(54.53, mean = 59, sd =  1.49)) * 100,2)
round((pnorm(4500 , mean = 3500 , sd =  500) - pnorm(2500 , mean = 3500 , sd =  500)) * 100,2)
round((pnorm(726  , mean = 504  , sd =  111) - pnorm(282 , mean = 504  , sd =  111)) * 100,2)
## (a)
round(pnorm(5.3788, mean = 5.9202 , sd = 0.8768) * 100, 2)
## (a)
round(pnorm(5.3788, mean = 5.9202 , sd = 0.8768) * 100, 5)
## (a)
round(pnorm(5.3788, mean = 5.9202 , sd = 0.8768) * 100, 4)
## (a)
round(pnorm(308, mean = 280 , sd = 8) * 100, 4)
## (a)
1-round(pnorm(308, mean = 280 , sd = 8) * 100, 4)
## (a)
1-(pnorm(308, mean = 280 , sd = 8))
## (a)
(1-(pnorm(308, mean = 280 , sd = 8)) * 100)
## (a)
1 - (pnorm(308, mean = 280 , sd = 8))
pnorm(845, mean = 1408 , sd =39.5319418)
1 - pnorm(845, mean = 1408 , sd =39.5319418)
(1 - pnorm(845, mean = 1408 , sd =39.5319418)) * 100
(1 -2 * pnorm(845, mean = 1408 , sd =39.5319418, lower.tail = F))
(1 - pnorm(845, mean = 1408 , sd =39.5319418, lower.tail = F))
(1 - pnorm(845, mean = 1408 , sd = 39.5319418, lower.tail = F))
( pnorm(845, mean = 1408 , sd = 39.5319418, lower.tail = F))
( pnorm(845, mean = 1408 , sd = 39.5319418))
1- ( pnorm(845, mean = 1408 , sd = 39.5319418))
pnorm(-3.51467)
pnorm(-3.51467) * 100
1- pnorm(-3.51467) * 100
1- pnorm(-3.51467)
pnorm(-3.51467)
mu = 1408
sigma = 375
n = 90
sample_mean= 845
den = 375/ sqrt(90)
z = (sample_mean - mu) / (den)
z
pnorm(z)
pnorm(0.05)
?lm
??linear
?lm
??linear
plot(1:20, 1:20)
############
getwd()
list.files()
## ---- datatypes2 ----------------------------------------------------------
# variables assignment is done with the <- operator
my.number <- 483
my.number
################################# CS688 Assignment 2 ####################################
# @author: Sahil Khanna
# BU ID: U86445364
# Last edit: Oct, 1st 2021
library("car") # for qqPlot
library(ggplot2)
library("effsize")
df <- read.csv("dataset.csv", header = T)
df <- df[2:5]
edu <- subset(df, df$Category %in% "Education")
getwd()
setwd("/Users/sahilkhanna/Documents/Books/Fall'21/CS688/Assignment/HW2")
df <- read.csv("dataset.csv", header = T)
df <- df[2:5]
df
edu <- subset(df, df$Category %in% "Education")
qqPlot(edu$Count, main = "Education", ylab="Count")
egt <- subset(df, df$Category %in% "Energy & Green Tech")
qqPlot(egt$Count, main = "Energy & Green Tech", ylab="Count")
hf <- subset(df, df$Category %in% "Health & Fitness")
qqPlot(hf$Count,  main = "Health & Fitness", ylab="Count")
fw <- subset(df, df$Category %in% "Fashion & Wearables")
qqPlot(fw$Count,  main = "Fashion & Wearables", ylab="Count")
well <- subset(df, df$Category %in% "Wellness")
qqPlot(well$Count, main = "Wellness", ylab="Count")
# Education
ed_p <- ggplot(edu, aes(x=Count)) +
geom_density(color="darkblue", fill="red") +
geom_vline(aes(xintercept=mean(Count)),
color="blue", linetype="dashed", size=1) +
labs(title="Education Density plot")
ed_p
# Energy & Green Tech
egt_p <- ggplot(egt, aes(x=Count)) +
geom_density(color="darkblue", fill="red") +
geom_vline(aes(xintercept=mean(Count)),
color="blue", linetype="dashed", size=1) +
labs(title="Energy & Green Tech Density plot")
egt_p
# Health & Fitness
hf_p <- ggplot(hf, aes(x=Count)) +
geom_density(color="darkblue", fill="red") +
geom_vline(aes(xintercept=mean(Count)),
color="blue", linetype="dashed", size=1) +
labs(title="Health & Fitness Density plot")
hf_p
# Fashion & Wearables
fw_p <- ggplot(fw, aes(x=Count)) +
geom_density(color="darkblue", fill="red") +
geom_vline(aes(xintercept=mean(Count)),
color="blue", linetype="dashed", size=1) +
labs(title="Fashion & Wearables Density plot")
fw_p
# Wellness
well_p <- ggplot(well, aes(x=Count)) +
geom_density(color="darkblue", fill="red") +
geom_vline(aes(xintercept=mean(Count)),
color="blue", linetype="dashed", size=1) +
labs(title="Wellness Density plot")
well_p
x <- subset(hf$Count, hf$Year %in% c("2018","2019","2020"))
y <- subset(fw$Count, fw$Year %in% c("2018","2019","2020"))
t.test(x, y)
## Non-parametric tests
ks.test(x,y)
wilcox.test(x,y)
cohen.d(x,y,return.dm=TRUE)
# Question 3
cor.test(x,y, alternative = "two.sided",method= "pearson", conf.level = 0.95 )
cor.test(x,y, alternative = "two.sided",method= "spearman", conf.level = 0.95 )
cor.test(x,y, alternative = "two.sided",method= "kendall", conf.level = 0.95 )
